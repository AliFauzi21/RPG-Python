import random
from game import Game
from chip import Chip

# フィールドクラス（マップの１画面分のクラス）
class Field:
    
    # 関数：コンストラクタ
    def __init__(self):
        # Ａ－１９Chipから）フィールドのチップのリスト
        self.chip_list = None
        # Ａ－２０）マップ番号に初期値を設定
        self.map_no = Game.START_FIELD
        # Ａ－２１）表示用のチップ（マス）の２重リストを作成
        self.chip_list = [[Chip() for _ in range(Game.FIELD_WIDTH)]
                          for _ in range(Game.FIELD_HEIGHT)]        
        # Ａ－２２）チップリストの数だけ２重ループ
        for y in range(Game.FIELD_HEIGHT):
            for x in range(Game.FIELD_WIDTH):
                # Ａ－２３）位置と初期画像を指定
                self.chip_list[y][x].set_pos(x, y)
                self.chip_list[y][x].set_chip_no(0)
        # Ｂ－２８最初）マップ番号に対応した情報を設定
        

    # 描画をする
    def draw(self):
        # Ａ－２４）チップリストの数だけ２重ループ
        for y in range(Game.FIELD_HEIGHT):
            for x in range(Game.FIELD_HEIGHT):
                # Ａ－２５mainへ）そのチップの描画をする
                self.chip_list[y][x].draw()

    # フィールド情報の読み込み
    def read_map_info(self):
        # Ｂ－２９）フィールド情報の設定
        pass
        # Ｂ－３０）チップリストの数だけ２重ループ
        
            
                # Ｂ－３１最後）フィールドの該当位置の情報を設定
                

    # フィールドチェンジ
    # （移動方向をfld_x, fld_yのプラスマイナス１でもらう）
    def change_field(self, fld_x, fld_y):
        # マップ数
        map_count = Game.MAP_COUNT
        # Ｆ－６１）左右移動後の位置がそのまま計算すると
        # 上下のフィールドになってしまう場合は、
        # １始まりなので１を引いてから割って比較）
        
        
            # Ｆ－６２）フィールドの横の数－１だけ、逆方向に移動
            
        # Ｆ－６３）そうでない場合
        
            # Ｆ－６４）マップNoを指定値加算
            
        
        # Ｆ－６５）上下に移動した場合は「横マップ数」を足す／引く
        

        # Ｆ－６６）フィールド数を超えた場合は、マップ数を引く
        
        
        # Ｆ－６７）０以下になった場合は、マップ数を足す
        

        # Ｆ－６８Playerへ）フィールド情報を再読み込み
        
        
        # Ｊ－１２６Squareから）モンスターの再配置
        
            # Ｊ－１２７）マスのピッタリの位置に配置する
            
            # Ｊ－１２８）配置できるまでループする
            # （※無限ループしてしまわないように、100回で諦める）
            
                # Ｊ－１２９）プレイヤーが端からくるので、外側の２マスには配置しない
                
                
                # Ｊ－１３０）モンスターが移動できない位置に配置されてしまった場合はやり直し
                
                
                
                # Ｊ－１３１Monsterへ）移動できる位置ならそこに配置
                
                
                
    # 移動可能チェック
    def check_movable(self, pos_list, unmovable_chip_list):
        # Ｇ－８２最初）チェック対象だけ繰り返し
        pass
            # Ｇ－８３）位置のx, yを取得
            
            # Ｇ－８４）その位置のチップNoを取得
            
            # Ｇ－８５）それが移動不可ならFalseを返却
            
            
        # Ｇ－８６Characterへ）すべての対象チップが移動可能な場合はTrueを返却
        

    # クラス変数：マップ情報
    MAP1 = (
        (3,3,3,0,0,0,0,2,0,2),
        (3,0,0,0,1,1,0,2,0,2), 
        (3,0,0,0,0,1,0,0,0,2), 
        (0,0,0,0,0,1,0,2,2,2), 
        (0,0,0,0,0,1,0,0,0,0), 
        (0,0,0,0,0,1,0,0,0,0), 
        (0,0,0,0,0,1,0,0,0,0), 
        (0,0,3,0,1,1,1,0,0,0), 
        (0,3,3,3,0,0,0,0,0,0), 
        (0,0,3,3,3,0,0,0,0,0) 
    )
    MAP2 = (
        (2,0,0,0,0,0,0,0,0,0), 
        (2,0,0,1,1,1,0,0,0,0), 
        (2,0,1,0,0,0,1,3,0,0), 
        (2,0,0,0,0,0,1,0,0,0), 
        (0,0,2,0,0,0,1,0,0,2), 
        (0,0,0,0,0,0,1,0,0,2), 
        (0,0,0,0,0,1,0,0,0,3), 
        (0,0,0,0,1,0,0,0,0,3), 
        (0,0,1,1,1,1,1,1,0,0), 
        (0,3,3,0,0,0,0,0,0,3)
    )
    MAP3 = (
        (0,0,0,0,0,0,0,0,0,3), 
        (0,0,0,1,1,1,1,0,0,3), 
        (0,0,1,0,0,0,0,1,0,3), 
        (0,0,0,0,0,0,0,1,0,0), 
        (2,0,0,0,0,0,1,0,0,0), 
        (2,0,0,0,0,0,0,1,0,0), 
        (3,0,1,0,0,0,0,1,0,0), 
        (3,0,0,1,1,1,1,0,0,0), 
        (0,0,0,0,0,0,0,0,0,0), 
        (3,3,3,3,2,2,0,0,0,0)
    )
    MAP4 = (
        (0,0,3,3,3,0,0,0,0,0), 
        (0,0,0,0,0,0,0,0,0,3), 
        (0,0,1,0,0,0,1,0,0,3), 
        (0,0,1,0,0,0,1,0,0,3), 
        (2,0,1,0,0,0,1,0,0,0), 
        (2,0,1,1,1,1,1,0,0,0), 
        (2,2,0,0,0,0,1,0,0,0), 
        (0,0,0,0,0,0,1,0,0,0), 
        (0,0,2,2,2,0,1,0,0,0), 
        (0,2,2,3,2,3,0,0,0,0)
    )
    MAP5 = (
        (0,2,2,0,0,0,0,0,0,3), 
        (3,0,0,0,0,0,0,0,0,0), 
        (3,3,1,1,1,1,1,0,0,0), 
        (3,0,1,0,0,0,0,0,0,0), 
        (0,0,1,0,0,0,0,0,0,0), 
        (0,0,1,1,1,1,0,0,0,0), 
        (0,0,0,0,0,0,1,0,0,0), 
        (0,0,1,0,0,0,1,0,0,0), 
        (0,0,0,1,1,1,0,0,0,2), 
        (0,3,3,0,0,0,0,2,2,2)
    )
    MAP6 = (
        (3,3,2,2,2,2,0,0,0,0), 
        (0,0,0,1,1,1,1,0,0,0), 
        (0,0,1,0,0,0,0,1,0,0), 
        (0,0,1,0,0,0,2,2,2,0), 
        (0,0,1,0,0,0,0,0,2,2), 
        (0,0,1,1,1,1,1,0,0,2), 
        (0,0,1,0,0,0,0,1,0,2), 
        (0,0,1,0,0,0,0,1,0,0), 
        (2,0,0,1,1,1,1,0,0,0), 
        (2,0,0,0,0,2,3,3,0,0)
    )
    MAP7 = (
        (0,2,2,2,2,2,0,0,0,0), 
        (0,0,0,0,0,0,0,0,0,0), 
        (0,0,1,1,1,1,1,0,0,0), 
        (0,0,1,0,0,0,1,0,0,0), 
        (0,0,0,0,0,0,1,0,0,0), 
        (0,0,0,0,0,0,1,0,0,0), 
        (0,0,0,0,0,1,0,0,0,0), 
        (0,0,0,0,0,1,0,0,0,0), 
        (0,0,0,0,1,0,0,0,0,0), 
        (3,3,3,0,0,0,0,2,2,3)
    )
    MAP8 = (
        (0,3,3,0,0,0,0,2,2,2), 
        (0,0,0,0,0,0,0,0,0,0), 
        (0,0,0,1,1,1,0,0,0,0), 
        (0,0,0,1,0,1,0,0,0,0), 
        (0,0,0,1,1,1,0,0,0,0), 
        (0,0,0,1,0,1,0,0,0,0), 
        (0,0,0,1,1,1,0,0,0,0), 
        (0,0,0,0,0,0,0,0,0,0), 
        (0,0,0,0,0,0,0,0,0,0), 
        (2,0,0,0,0,0,0,0,0,0) 
    )
    MAP9 = (
        (2,0,0,0,0,2,3,3,0,0), 
        (0,0,0,0,0,0,0,0,0,0), 
        (0,0,0,1,1,1,0,0,0,0), 
        (0,0,1,0,0,1,0,0,0,0), 
        (0,0,0,1,1,1,0,0,0,0), 
        (0,0,0,0,0,1,0,0,0,0), 
        (0,0,0,0,0,1,0,0,0,0), 
        (0,3,3,1,1,0,0,0,0,0), 
        (0,3,3,3,2,2,0,0,0,0), 
        (0,0,0,0,0,0,0,0,0,3) 
    )

    MAP_LIST = (0, MAP1, MAP2, MAP3, MAP4, MAP5, MAP6, MAP7, MAP8, MAP9)
